{"name": "test_login[dic0]", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 2 (char 1)", "trace": "self = <testcase.test_mtx_login.TestLogin object at 0x000001EE6617B9E8>, dic = {'accounts': 'yaoyao', 'exp': '密码格式 6~18 个字符之间', 'pwd': ''}\n\n    @pytest.mark.parametrize('dic', data_li)\n    @allure.feature('用户登录功能')\n    @allure.story('登录功能的测试用例')\n    @allure.severity('blocker')\n    def test_login(self, dic):\n        '''\n        data_li是列表套字典的形式用这个测试用例里面的写法\n        :param dic:\n        :return:\n        '''\n       # 读取数据，进行构造data,然后发起请求\n        data = {'accounts': dic['accounts'], 'pwd': dic['pwd']}\n>       res = self.login_object.login(self.session, data).json()\n\ntestcase\\test_mtx_login.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nd:\\python\\untitled5\\lib\\site-packages\\requests\\models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\nD:\\python\\lib\\json\\__init__.py:354: in loads\n    return _default_decoder.decode(s)\nD:\\python\\lib\\json\\decoder.py:339: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x000001EE64441240>\ns = \"[Fiddler] The connection to '10.74.131.110' failed. <br />Error: TimedOut (0x274c). <br />System.Net.Sockets.SocketEx...                                                                                                                      \"\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 2 (char 1)\n\nD:\\python\\lib\\json\\decoder.py:357: JSONDecodeError"}, "description": "\n        data_li是列表套字典的形式用这个测试用例里面的写法\n        :param dic:\n        :return:\n        ", "attachments": [{"name": "log", "source": "4e867e79-a07a-4b49-97d7-8f29b5106aac-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "dic", "value": "{'accounts': 'yaoyao', 'pwd': '', 'exp': '密码格式 6~18 个字符之间'}"}], "start": 1606733732451, "stop": 1606733753459, "uuid": "3c0fa839-b46a-4d5f-a964-9ba421f31b02", "historyId": "2f3d59758a905822a6131d0035e95a9f", "testCaseId": "b0c4ff85b91ad0d4c7a4eacc509cc69d", "fullName": "testcase.test_mtx_login.TestLogin#test_login", "labels": [{"name": "feature", "value": "用户登录功能"}, {"name": "story", "value": "登录功能的测试用例"}, {"name": "severity", "value": "blocker"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_mtx_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "liusx17111"}, {"name": "thread", "value": "35148-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_mtx_login"}]}